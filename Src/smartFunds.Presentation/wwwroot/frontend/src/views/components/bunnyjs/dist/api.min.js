var ApiConfig={prefix:"/ajax",headers:{Accept:"application/json","X-Requested-With":"XMLHttpRequest"},credentials:"same-origin",redirectDelay:2e3},Api={Config:ApiConfig,prefix:"",request:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=this,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"json",s=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],u=this.createRequest(t,e,n,r,i,s);return fetch(u).then(function(t){return 200===t.status?t[i]():o.onStatusFail(t)}).then(function(t){return o.onResponse(t)}).catch(function(n){return o.onError(n,o.createUrl(t),e)})},createRequest:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],!(arguments.length>5&&void 0!==arguments[5])||arguments[5]),i=this.createHeaders(r,o),s={method:e,headers:i,credentials:this.Config.credentials};return null!==n&&(s.body=n),new Request(this.createUrl(t),s)},createHeaders:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n={};return n=e?Object.assign({},this.Config.headers,t):t,new Headers(n)},createUrl:function(t){return t.indexOf("://")>-1?t:this.Config.prefix+this.prefix+t},get:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r="";return null!==e&&(r="?"+Object.keys(e).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")),this.request(t+r,"GET",null,n)},createFormData:function(t){if(t instanceof FormData)return t;var e=new FormData;for(var n in t)e.append(n,t[n]);return e},post:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request(t,"POST",this.createFormData(e),n)},onResponse:function(t){return t.message?this.showStatusWarning(t.message):t.success&&this.showStatusSuccess(t.success),this.attemptRedirect(t),t},onError:function(t,e,n){t.status,t.statusText;return Promise.reject(t)},onRequestEntityTooLarge:function(){this.showStatusError("413: Request entity too large!")},onStatusNotFound:function(){this.showStatusError("404: API Route not found!")},onStatusAccessDenied:function(){this.showStatusError("403: Access denied!")},onStatusUnauthorized:function(){this.showStatusError("401: You are not logged in!")},onStatusServerError:function(){this.showStatusError("500: Server error!")},onStatusFail:function(t){var e=t.status,n="onStatus"+e;return void 0!==this[n]?this[n](t):413===e?this.onRequestEntityTooLarge():404===e?this.onStatusNotFound():403===e?this.onStatusAccessDenied():401===e?this.onStatusUnauthorized():500===e&&this.onStatusServerError(),Promise.reject(t)},showStatusError:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Notify.Config.autoRemoveAfter;Notify.danger(t,e)},showStatusWarning:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Notify.Config.autoRemoveAfter;Notify.warning(t,e)},showStatusSuccess:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Notify.Config.autoRemoveAfter;Notify.success(t,e)},attemptRedirect:function(t){var e=null;void 0!==t.redirectback?e=""!==document.referrer?function(){location.href=document.referrer}:void 0===t.redirect||""===t.redirect?function(){return location.reload()}:function(){location.href=t.redirect}:void 0!==t.redirect&&(e=""===t.redirect?function(){return location.reload()}:function(){location.href=t.redirect}),null!==e&&setTimeout(e,this.Config.redirectDelay)}};