// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using smartFunds.Data;

namespace smartFunds.Data.Migrations
{
    [DbContext(typeof(smartFundsDbContext))]
    [Migration("20190502044600_userfund")]
    partial class userfund
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("smartFunds.Data.Models.AdminTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FundId");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<int>("Status");

                    b.Property<decimal>("TransactionAmount");

                    b.Property<int>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("FundId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Country", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1Label");

                    b.Property<bool>("Address1Required");

                    b.Property<bool>("Address1Visible");

                    b.Property<string>("Address2Label");

                    b.Property<bool>("Address2Required");

                    b.Property<bool>("Address2Visible");

                    b.Property<string>("Address3Label");

                    b.Property<bool>("Address3Required");

                    b.Property<bool>("Address3Visible");

                    b.Property<string>("Address4Label");

                    b.Property<bool>("Address4Required");

                    b.Property<bool>("Address4Visible");

                    b.Property<string>("Address5Label");

                    b.Property<bool>("Address5Required");

                    b.Property<bool>("Address5Visible");

                    b.Property<string>("Address6Label");

                    b.Property<bool>("Address6Required");

                    b.Property<bool>("Address6Visible");

                    b.Property<string>("Address7Label");

                    b.Property<bool>("Address7Required");

                    b.Property<bool>("Address7Visible");

                    b.Property<string>("Address8Label");

                    b.Property<bool>("Address8Required");

                    b.Property<bool>("Address8Visible");

                    b.Property<string>("AddressFormat");

                    b.Property<string>("DialingPrefix");

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.HasKey("Code");

                    b.HasIndex("RegionId");

                    b.ToTable("CountryView","dbo");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Locality", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CountryCode");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("LocalityView","dbo");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Member", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("Address4");

                    b.Property<string>("Address5");

                    b.Property<string>("Address6");

                    b.Property<string>("Address7");

                    b.Property<string>("Address8");

                    b.Property<string>("AddressFormat");

                    b.Property<int?>("Age");

                    b.Property<string>("CountryCode");

                    b.Property<string>("CountryName");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<DateTime?>("DeceasedDate");

                    b.Property<string>("DeceasedSpouse");

                    b.Property<string>("Email");

                    b.Property<bool?>("FatherDeceased");

                    b.Property<int?>("FatherId");

                    b.Property<string>("FathersLocality");

                    b.Property<string>("FathersName");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstName_SC");

                    b.Property<string>("FullName");

                    b.Property<string>("FullNameReverse");

                    b.Property<string>("Generation");

                    b.Property<string>("HomePhone");

                    b.Property<string>("HomePhoneCode");

                    b.Property<DateTime?>("HomePhoneLastUpdated");

                    b.Property<string>("HouseholdCoupleName");

                    b.Property<string>("HouseholdLastName");

                    b.Property<string>("HouseholdName");

                    b.Property<string>("HouseholdNameDisplay");

                    b.Property<string>("Household_FirstName");

                    b.Property<string>("Household_LastName");

                    b.Property<int?>("HouseholderId");

                    b.Property<string>("HouseholderName");

                    b.Property<bool>("IsDeceased");

                    b.Property<bool>("IsHidden");

                    b.Property<bool>("IsHouseholder");

                    b.Property<string>("LastName");

                    b.Property<string>("LastName_SC");

                    b.Property<int?>("LocalityId");

                    b.Property<string>("LocalityName");

                    b.Property<string>("MaidenName");

                    b.Property<string>("MobilePhone");

                    b.Property<string>("MobilePhoneCode");

                    b.Property<DateTime?>("MobilePhoneLastUpdated");

                    b.Property<bool?>("MotherDeceased");

                    b.Property<int?>("MotherId");

                    b.Property<string>("MothersLocality");

                    b.Property<string>("MothersName");

                    b.Property<string>("PhotoTagCdnPath");

                    b.Property<int?>("RegionId");

                    b.Property<string>("RegionName");

                    b.Property<int?>("SpouseId");

                    b.Property<int?>("SublocalityId");

                    b.Property<bool?>("SublocalityIsMainHall");

                    b.Property<string>("SublocalityName");

                    b.Property<string>("SublocalityShortName");

                    b.Property<string>("Title");

                    b.Property<string>("WorkPhone");

                    b.Property<string>("WorkPhoneCode");

                    b.Property<DateTime?>("WorkPhoneLastUpdated");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("LocalityId");

                    b.HasIndex("SublocalityId");

                    b.ToTable("MemberView","dbo");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Region", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RegionView","dbo");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Sublocality", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("Address4");

                    b.Property<string>("Address5");

                    b.Property<string>("Address6");

                    b.Property<string>("Address7");

                    b.Property<string>("Address8");

                    b.Property<bool>("IsMainHall");

                    b.Property<int>("LocalityId");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.ToTable("SublocalityView","dbo");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<DateTime>("EventDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("MainLocalityId");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("MainLocalityId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("smartFunds.Data.Models.EventGuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<int>("EventId");

                    b.Property<int>("HouseholderId");

                    b.Property<bool>("IsAway");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsToBeAssigned");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("MemberId");

                    b.HasKey("Id");

                    b.HasIndex("EventId", "MemberId", "HouseholderId");

                    b.ToTable("EventGuests");
                });

            modelBuilder.Entity("smartFunds.Data.Models.EventHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CP");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<int>("EventId");

                    b.Property<int>("HostId");

                    b.Property<int>("HouseholderId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("SCP");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("EventId", "HostId");

                    b.ToTable("EventHosts");
                });

            modelBuilder.Entity("smartFunds.Data.Models.EventSublocality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("SublocalityId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SublocalityId");

                    b.ToTable("EventSublocalities");
                });

            modelBuilder.Entity("smartFunds.Data.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Fund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CertificateValue");

                    b.Property<string>("Code");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("Link");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Fund");
                });

            modelBuilder.Entity("smartFunds.Data.Models.HangFire.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ExpireAt");

                    b.Property<string>("StateName");

                    b.HasKey("Id");

                    b.ToTable("Job","HangFire");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<int>("DefaultCP");

                    b.Property<int>("DefaultSCP");

                    b.Property<int>("HouseholderId");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("LocalityId");

                    b.HasKey("Id");

                    b.HasIndex("HouseholderId");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Interchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("MainLocalityId");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("MainLocalityId", "IsDeleted", "DeletedAt")
                        .IsUnique()
                        .HasFilter("[DeletedAt] IS NOT NULL");

                    b.ToTable("Interchanges");
                });

            modelBuilder.Entity("smartFunds.Data.Models.InterchangeLocality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<int>("InterchangeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("LocalityId");

                    b.HasKey("Id");

                    b.HasIndex("InterchangeId");

                    b.HasIndex("LocalityId");

                    b.ToTable("InterchangeLocalities");
                });

            modelBuilder.Entity("smartFunds.Data.Models.InvestmentTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt");

                    b.Property<int>("Duration");

                    b.Property<int>("Frequency");

                    b.Property<int>("InvestmentMethod");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<decimal>("OneTimeAmount");

                    b.Property<decimal>("TargetAmount");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InvestmentTargets");
                });

            modelBuilder.Entity("smartFunds.Data.Models.KVRR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<string>("Detail");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KVRRImagePath");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Kvrr");
                });

            modelBuilder.Entity("smartFunds.Data.Models.KVRRAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int?>("KVRRQuestionId");

                    b.Property<int>("Mark");

                    b.HasKey("Id");

                    b.HasIndex("KVRRQuestionId");

                    b.ToTable("KvrrAnswer");
                });

            modelBuilder.Entity("smartFunds.Data.Models.KVRRMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<int?>("KVRRId");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("MarkFrom");

                    b.Property<int>("MarkTo");

                    b.HasKey("Id");

                    b.HasIndex("KVRRId");

                    b.ToTable("KvrrMark");
                });

            modelBuilder.Entity("smartFunds.Data.Models.KVRRPortfolio", b =>
                {
                    b.Property<int>("KVRRId");

                    b.Property<int>("PortfolioId");

                    b.HasKey("KVRRId", "PortfolioId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("KVRRPortfolio");
                });

            modelBuilder.Entity("smartFunds.Data.Models.KVRRQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("No");

                    b.HasKey("Id");

                    b.ToTable("KvrrQuestion");
                });

            modelBuilder.Entity("smartFunds.Data.Models.MealAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt");

                    b.Property<int>("EventGuestId");

                    b.Property<int>("EventHostId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("EventHostId");

                    b.ToTable("MealAllocations");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Portfolio");
                });

            modelBuilder.Entity("smartFunds.Data.Models.PortfolioFund", b =>
                {
                    b.Property<int>("PortfolioId");

                    b.Property<int>("FundId");

                    b.Property<decimal?>("FundPercent");

                    b.HasKey("PortfolioId", "FundId");

                    b.HasIndex("FundId");

                    b.ToTable("PortfolioFund");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Setting", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("smartFunds.Data.Models.TransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("CurrentAccountAmount");

                    b.Property<int>("Status");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TransactionType");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionHistory");
                });

            modelBuilder.Entity("smartFunds.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<decimal>("AmountWithdrawn");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("CurrentAccountAmount");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<decimal>("InitialInvestmentAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("KVRRId");

                    b.Property<DateTime>("LastLogin");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("KVRRId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("smartFunds.Data.Models.UserFund", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("FundId");

                    b.Property<decimal?>("NoOfCertificates");

                    b.HasKey("UserId", "FundId");

                    b.HasIndex("FundId");

                    b.ToTable("UserFunds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("smartFunds.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("smartFunds.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("smartFunds.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("smartFunds.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("smartFunds.Data.Models.AdminTask", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Country", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Contactbase.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Locality", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Contactbase.Country")
                        .WithMany("Localities")
                        .HasForeignKey("CountryCode");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Member", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Contactbase.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");

                    b.HasOne("smartFunds.Data.Models.Contactbase.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId");

                    b.HasOne("smartFunds.Data.Models.Contactbase.Sublocality", "Sublocality")
                        .WithMany()
                        .HasForeignKey("SublocalityId");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Contactbase.Sublocality", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Contactbase.Locality", "Locality")
                        .WithMany("Sublocalities")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.Event", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Contactbase.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");

                    b.HasOne("smartFunds.Data.Models.Contactbase.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("MainLocalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.EventGuest", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.EventHost", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Event", "Event")
                        .WithMany("EventHosts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("smartFunds.Data.Models.Host", "Host")
                        .WithMany("EventHosts")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.EventSublocality", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Event", "Event")
                        .WithMany("EventSublocalities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("smartFunds.Data.Models.Contactbase.Sublocality", "Sublocality")
                        .WithMany()
                        .HasForeignKey("SublocalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.Interchange", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Contactbase.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");

                    b.HasOne("smartFunds.Data.Models.Contactbase.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("MainLocalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.InterchangeLocality", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Interchange", "Interchange")
                        .WithMany("InterchangeLocalities")
                        .HasForeignKey("InterchangeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("smartFunds.Data.Models.Contactbase.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.InvestmentTarget", b =>
                {
                    b.HasOne("smartFunds.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("smartFunds.Data.Models.KVRRAnswer", b =>
                {
                    b.HasOne("smartFunds.Data.Models.KVRRQuestion", "KVRRQuestion")
                        .WithMany("KVRRAnswers")
                        .HasForeignKey("KVRRQuestionId");
                });

            modelBuilder.Entity("smartFunds.Data.Models.KVRRMark", b =>
                {
                    b.HasOne("smartFunds.Data.Models.KVRR", "KVRR")
                        .WithMany()
                        .HasForeignKey("KVRRId");
                });

            modelBuilder.Entity("smartFunds.Data.Models.KVRRPortfolio", b =>
                {
                    b.HasOne("smartFunds.Data.Models.KVRR", "KVRR")
                        .WithMany("KVRRPortfolios")
                        .HasForeignKey("KVRRId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("smartFunds.Data.Models.Portfolio", "Portfolio")
                        .WithMany("KVRRPortfolios")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.MealAllocation", b =>
                {
                    b.HasOne("smartFunds.Data.Models.EventGuest", "EventGuest")
                        .WithMany()
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("smartFunds.Data.Models.EventHost", "EventHost")
                        .WithMany()
                        .HasForeignKey("EventHostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.PortfolioFund", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Fund", "Fund")
                        .WithMany("PortfolioFunds")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("smartFunds.Data.Models.Portfolio", "Portfolio")
                        .WithMany("PortfolioFunds")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.TransactionHistory", b =>
                {
                    b.HasOne("smartFunds.Data.Models.User", "User")
                        .WithMany("TransactionHistory")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("smartFunds.Data.Models.User", b =>
                {
                    b.HasOne("smartFunds.Data.Models.KVRR", "KVRR")
                        .WithMany()
                        .HasForeignKey("KVRRId");
                });

            modelBuilder.Entity("smartFunds.Data.Models.UserFund", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Fund", "Fund")
                        .WithMany("UserFunds")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("smartFunds.Data.Models.User", "User")
                        .WithMany("UserFunds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
