// <auto-generated />
using System;
using smartFunds.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace smartFunds.Data.Migrations
{
    [DbContext(typeof(smartFundsDbContext))]
    [Migration("20190123221418_HangFireJobCreateTableIgnore")]
    partial class HangFireJobCreateTableIgnore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("smartFunds.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<DateTime>("EventDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("MainLocalityId");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("smartFunds.Data.Models.EventSublocality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("SublocalityId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventSublocalities");
                });

            modelBuilder.Entity("smartFunds.Data.Models.HangFire.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ExpireAt");

                    b.Property<string>("StateName");

                    b.HasKey("Id");

                    b.ToTable("Job","HangFire");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Interchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("MainLocalityId");

                    b.HasKey("Id");

                    b.HasIndex("MainLocalityId", "IsDeleted", "DeletedAt")
                        .IsUnique()
                        .HasFilter("[DeletedAt] IS NOT NULL");

                    b.ToTable("Interchanges");
                });

            modelBuilder.Entity("smartFunds.Data.Models.InterchangeLocality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<int>("InterchangeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("LocalityId");

                    b.HasKey("Id");

                    b.HasIndex("InterchangeId");

                    b.ToTable("InterchangeLocalities");
                });

            modelBuilder.Entity("smartFunds.Data.Models.Setting", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("smartFunds.Data.Models.UserQueuedJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated");

                    b.Property<string>("DeletedAt")
                        .HasMaxLength(30);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JobId")
                        .IsRequired();

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UserQueuedJobs");
                });

            modelBuilder.Entity("smartFunds.Data.Models.EventSublocality", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Event", "Event")
                        .WithMany("EventSublocalities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("smartFunds.Data.Models.InterchangeLocality", b =>
                {
                    b.HasOne("smartFunds.Data.Models.Interchange", "Interchange")
                        .WithMany("InterchangeLocalities")
                        .HasForeignKey("InterchangeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
